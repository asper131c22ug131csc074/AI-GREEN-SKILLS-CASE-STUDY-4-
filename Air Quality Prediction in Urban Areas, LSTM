import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load dataset (replace 'air_quality_data.csv' with actual file)
df = pd.read_csv("air_quality_data.csv")

# Select relevant features (PM2.5, PM10, NO2, CO, traffic, weather)
features = ['PM2.5', 'PM10', 'NO2', 'CO', 'traffic', 'temperature', 'humidity', 'wind_speed']
df = df[features].dropna()

# Normalize data
scaler = MinMaxScaler()
df_scaled = scaler.fit_transform(df)

# Prepare input-output sequences (past 24 hours -> next hour AQI)
def create_sequences(data, seq_length=24):
    X, y = [], []
    for i in range(len(data) - seq_length - 1):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length][0])  # Predicting PM2.5 (AQI indicator)
    return np.array(X), np.array(y)

seq_length = 24  # Use past 24 hours to predict next hour AQI
X, y = create_sequences(df_scaled, seq_length)

# Split into training and testing sets
split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# Build LSTM model
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(seq_length, len(features))),
    Dropout(0.2),
    LSTM(50, return_sequences=False),
    Dropout(0.2),
    Dense(25, activation='relu'),
    Dense(1)  # Output AQI prediction
])

# Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train model
model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Make predictions
y_pred = model.predict(X_test)

# Inverse transform predictions and actual values
y_test_inv = scaler.inverse_transform(np.column_stack([y_test] + [np.zeros(y_test.shape) for _ in range(len(features)-1)]))[:, 0]
y_pred_inv = scaler.inverse_transform(np.column_stack([y_pred.flatten()] + [np.zeros(y_pred.shape) for _ in range(len(features)-1)]))[:, 0]

# Evaluate model
rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))
print(f'RMSE: {rmse}')

# Plot results
plt.figure(figsize=(10,5))
plt.plot(y_test_inv, label='Actual AQI', color='blue')
plt.plot(y_pred_inv, label='Predicted AQI', color='red', linestyle='dashed')
plt.legend()
plt.title('Actual vs Predicted AQI')
plt.show()
